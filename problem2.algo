FUNCTION dot_product(V1,V2 : array_of_INTEGER [10]) : INTEGER  // sub_algorthim
VAR
    dot , i : INTEGER
BEGIN
    dot :=0
    i := 0
    IF (V1.lenght <> V2.lenght) THEN
        write ("vector V1 and V2 are not equal") // WE cannot calculate dot because V1 and V2 are not equal
    END_IF
    REPEAT
            dot = dot+V1[i]*V2[i]
            i = i+1
    UNTIL (i > V1.lenght)
    RETURN dot ;
END
ALGORITHM DOT_PRODUCT          //main_algorithm
VAR
    V1,V2 : array_of_INTEGER[10];
    dot : INTEGER 
    i : INTEGER   //declare the count of the array
BEGIN
    FOR i FROM 0 TO V1[lenght-1]  DO        //Declaration of premier array from user (V1)
        write ("element of array V1")
        read (V1[i])
    END_FOR
    FOR i FROM 0 TO V2[lenght-1]  DO      //Declaration of second array  from user (V2)
        write ("element of array V2")
        read (V2[i])
    END_FOR
    dot := dot_product(V1,V2)       //Passing parameter by Value
    IF (dot = 0) THEN
        write ("V1 and V2 are orthogonal")
        ELSE
            write("V1 and V2 are not orthogonal")
    END_IF
END

// Modify the previous algorithm if you use a dot_product function instead of a procedure
PROCEDURE dot_product(V1,V2:array_of_INTEGER)    
VAR
    i,dot : INTEGER;
BEGIN
    dot :=0
    i := 0
    IF (V1.lenght <> V2.lenght) THEN
        write ("vector V1 and V2 are not equal ") 
    END_IF
    REPEAT
            dot = dot+V1[i]*V2[i]
            i = i+1
    UNTIL (i > V1.lenght)
END